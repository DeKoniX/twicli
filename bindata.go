// Code generated by go-bindata.
// sources:
// js/main.js
// view/at.html
// view/auth.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jsMainJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xd1\x6a\xc3\x30\x0c\x45\x7f\x25\xcb\x43\xb0\x99\x70\x5a\x68\x5f\x1a\xc4\x3e\x24\x84\x21\xcb\x1e\x36\x33\x76\xb1\x95\xf6\xa1\xe4\xdf\x47\x19\x8c\xac\x8f\xe2\xe8\x5c\xee\x55\x5f\x6b\x66\x89\x25\x2b\xfd\xb8\x51\xed\x08\x2c\x30\xb8\xc9\xe2\x3d\x66\x57\xee\x26\x15\xa6\x27\x37\x81\x5a\x30\x6d\xb5\x4d\xaa\x3a\x6a\x20\xfc\x33\x09\xec\xaf\xcc\x53\xf5\xb2\xd6\xdc\x31\x5a\xd3\xae\x29\x8a\xea\xb1\xd7\x40\x33\xcf\x87\x65\x41\x9e\x8f\x0b\xd0\x06\x3b\x3c\xf4\xda\x54\xef\x56\xf6\x8a\xe0\xb1\x69\xb8\x95\xe8\xba\xc3\x1b\x22\x1b\x62\xf6\xad\x7d\x4a\xf9\xf6\x79\x18\x94\xc3\x3e\x88\x5c\x2f\xe3\xf8\xec\x94\x42\x69\x72\x39\x9f\xce\xa7\x71\xff\xf7\xb1\x3f\xb0\x7f\xff\x9f\x02\x2f\xa3\xd0\xe9\x4d\x1b\xa6\x94\x94\x84\xd8\xf4\xf4\x13\x00\x00\xff\xff\x43\xbc\x3f\xef\x0f\x01\x00\x00")

func jsMainJsBytes() ([]byte, error) {
	return bindataRead(
		_jsMainJs,
		"js/main.js",
	)
}

func jsMainJs() (*asset, error) {
	bytes, err := jsMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/main.js", size: 271, mode: os.FileMode(420), modTime: time.Unix(1501495331, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewAtHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8f\xb1\x4e\xc4\x30\x0c\x86\xf7\x3c\x85\xc9\x0c\x78\x65\x70\x23\x9d\x0a\x03\x12\x12\x0c\x5d\x18\x83\x6b\x74\x29\x69\x13\xd5\x86\x72\x88\x87\x47\x77\xa1\x93\x25\xff\x9f\xec\xef\xa7\xab\xfb\xe7\x7e\x78\x7d\x79\x80\xa3\xcd\x39\x38\xda\x87\xc4\x31\x38\x00\x9a\xc5\x22\xf0\x31\xae\x2a\xd6\xf9\x4f\x7b\xbf\xb9\xf3\x97\xc0\x92\x65\x09\x07\x66\x51\x05\x2b\x1f\xb2\x00\x97\xb9\x66\x31\x81\x5f\x18\xb6\xd4\x3f\x3d\x12\x36\xea\xcc\x2b\xaf\xa9\x1a\xd8\xa9\x4a\xe7\x4d\xbe\x0d\xa7\xf8\x15\xdb\xd6\x83\xae\xdc\x79\x9c\x14\xe7\x98\x96\xdb\x49\x7d\x20\x6c\x59\x70\x84\xcd\x86\xde\xca\x78\x0a\x8e\x2a\x70\x8e\xaa\x9d\x8f\xe6\x43\xbf\xff\x3c\x5c\x44\x86\xb3\xc8\x35\xd4\xfc\x03\x9c\x8b\x0a\x6c\x69\x19\xcb\x46\x58\x83\x73\x84\xff\x17\xb0\xb5\xfc\x0b\x00\x00\xff\xff\x91\xce\x7a\xaa\xfd\x00\x00\x00")

func viewAtHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewAtHtml,
		"view/at.html",
	)
}

func viewAtHtml() (*asset, error) {
	bytes, err := viewAtHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/at.html", size: 253, mode: os.FileMode(420), modTime: time.Unix(1501493962, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewAuthHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xbb\x4a\x06\x41\x0c\x85\xfb\x79\x8a\x98\x5e\xd3\x8a\x64\x06\x64\xb5\x10\x04\x2d\xb6\xb1\x8c\xb3\x91\x9d\x75\x2f\xc3\x26\x5e\x16\x7c\x78\xd1\xd1\xe2\xaf\x02\xf9\x3e\x38\xe7\xf0\xd9\xcd\x43\xd7\x3f\x3d\xde\xc2\xe8\xcb\x9c\x02\xff\x1f\x95\x21\x05\x00\x5e\xd4\x05\xf2\x28\xbb\xa9\x47\x7c\xf3\x97\xf3\x4b\xfc\x05\x5e\x7c\xd6\x74\x9d\xb3\x9a\x81\x6f\xaf\xba\xc2\x17\xf4\x1f\xa5\xbb\xbf\x63\x6a\xf0\x47\xb3\xbc\x97\xea\xe0\x47\xd5\x88\xae\x9f\x4e\x93\xbc\x4b\xfb\x22\xd8\x9e\x23\xd2\x64\xb4\x48\x59\x2f\x26\xc3\xc4\xd4\x58\x0a\x4c\xad\x04\x3f\x6f\xc3\x91\x02\x57\xc8\xb3\x98\x45\x14\xc7\x93\xdc\x2b\x60\xaa\x29\x04\xa6\x3f\x93\xda\x88\xef\x00\x00\x00\xff\xff\xbd\x71\xd5\x16\xdc\x00\x00\x00")

func viewAuthHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewAuthHtml,
		"view/auth.html",
	)
}

func viewAuthHtml() (*asset, error) {
	bytes, err := viewAuthHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/auth.html", size: 220, mode: os.FileMode(420), modTime: time.Unix(1501493396, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"js/main.js": jsMainJs,
	"view/at.html": viewAtHtml,
	"view/auth.html": viewAuthHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"js": &bintree{nil, map[string]*bintree{
		"main.js": &bintree{jsMainJs, map[string]*bintree{}},
	}},
	"view": &bintree{nil, map[string]*bintree{
		"at.html": &bintree{viewAtHtml, map[string]*bintree{}},
		"auth.html": &bintree{viewAuthHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

